@Library('sharedlib@main')_
pipeline {
    agent any

    options {
        timeout(time: 5, unit: 'MINUTES')
        disableConcurrentBuilds()
        disableResume()
        buildDiscarder logRotator(
                daysToKeepStr: "5",
                numToKeepStr: "120"
        )
    }

    triggers {
        cron('H/50 * * * *')
    }

    parameters {
        choice(name: 'slack_channel', choices: ['#operations', '#robotparty'], description: 'The slack channel to notify on failure')
    }

    stages {
        stage('Validating Current Release Versions') {
            steps {

                script {
                    def currentRelease = currentVersion('current_release.txt').trim()
                    def candidateRelease = currentVersion('candidate_release.txt').trim()

                    def inCodeCutoff = !currentRelease.equals(candidateRelease)

                    // Get target version
                    def targets = [
                            [
                                    url           : "https://ocean.cognisantmd.com/healthCheck",
                                    app           : "Ocean",
                                    env           : "prod",
                                    releaseVersion: currentRelease
                            ],

                            [
                                    url           : "https://cloudconnect.cognisantmd.com/healthCheck",
                                    app           : "CloudConnect",
                                    env           : "prod",
                                    releaseVersion: currentRelease
                            ],

                            [
                                    url           : "https://staging.cognisantmd.com/healthCheck",
                                    app           : "Ocean",
                                    env           : "staging",
                                    releaseVersion: inCodeCutoff ? candidateRelease : currentRelease
                            ],

                            [
                                    url           : "https://stagingcc.cognisantmd.com/healthCheck",
                                    app           : "CloudConnect",
                                    env           : "staging",
                                    releaseVersion: inCodeCutoff ? candidateRelease : currentRelease
                            ]
                    ]

                    targets.each {
                        //get current svn version
                        // def svnVersion = new Version(
                        //         name: "SVN Version",
                        //         version: getSVNVersion("${it.releaseVersion}/${it.app}", v = null)
                        // )
                        def svnVersion = 2500
                        compareVersions(svnVersion, getDeployedVersion(it), it)
                        compareVersions(svnVersion, getLatestVersion(it), it)
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                if (currentBuild.currentResult == 'SUCCESS') {
                    echo 'All envs are running latest release versions'
                } else {
                    // sendSlackMessage(
                    //         app: 'Compare Current Releases',
                    //         env: 'JenkinsJob',
                    //         msg: 'Job failed. What happened?',
                    //         color: 'danger',
                    //         slack_channel: params.slack_channel
                    // )
                }
            }
        }
    }
}

class Version {
    String version
    String name
}

def compareVersions(anchorVersion, compVersion, target) {
    if (!anchorVersion.version.equals(compVersion.version)) {
        println("${anchorVersion.name}, ${compVersion.name} mismatch found")
        // sendSlackMessage(
        //         app: target.app,
        //         env: target.env,
        //         msg: "Version mismatch (${anchorVersion.name}: ${anchorVersion.version}, ${compVersion.name}: ${compVersion.version})",
        //         color: 'warning',
        //         slack_channel: params.slack_channel
        // )
    }
}

//returns the version of the package running in the given environment
def getDeployedVersion(target) {
    return new Version(
            name: "Deployed Version",
            version: sh(script: "curl ${target.url} | grep 'SVN Revision:' | awk '{print \$3}'", returnStdout: true).trim()
    )
}

//returns the version of the most recently built package
def getLatestVersion(target) {
    withCredentials([string(credentialsId: 'tf_aws_poweruser_access_key_id', variable: 'AWS_ACCESS_KEY_ID'),
                     string(credentialsId: 'tf_aws_poweruser_access_secret', variable: 'AWS_SECRET_ACCESS_KEY')]) {

        def s3Url = "s3://releases.cognisantmd.com/${target.app}/${target.releaseVersion}/"
        def matchRelease = sh(
                script: "/usr/local/bin/aws s3 ls ${s3Url} | sort | tail -1 | awk '{print \$4}'",
                returnStdout: true
        ).trim() =~ "([0-9]+)"
        return new Version(
                name: "Latest Release Version",
                version: matchRelease[0][0]
        )
    }
}