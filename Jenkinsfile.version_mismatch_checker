@Library('sharedlib@main')_
pipeline {
    agent any

    options {
        timeout(time: 5, unit: 'MINUTES')
        disableConcurrentBuilds()
        disableResume()
        buildDiscarder logRotator(
            daysToKeepStr: "5",
            numToKeepStr: "120"
        )
    }

    triggers {
        cron('H/50 * * * *')
    }

    parameters {
        choice(name: 'slack_channel', choices: ['#operations', '#robotparty'], description: 'The slack channel to notify on failure')
    }

    stages {
        stage('Validating Current Release Versions') {
            steps {
                withCredentials([string(credentialsId: 'tf_aws_poweruser_access_key_id', variable: 'AWS_ACCESS_KEY_ID'),
                                 string(credentialsId: 'tf_aws_poweruser_access_secret', variable: 'AWS_SECRET_ACCESS_KEY')]) {
                    script {
                        def currentRelease = currentVersion('current_release.txt').trim()
                        def candidateRelease = currentVersion('candidate_release.txt').trim()

                        // Get target version
                        def targets = [
                                [
                                        url: "https://ocean.cognisantmd.com/healthCheck",
                                        app: "Ocean",
                                        env: "prod",
                                        releaseVersion: currentRelease
                                ],

                                [
                                        url: "https://cloudconnect.cognisantmd.com/healthCheck",
                                        app: "CloudConnect",
                                        env: "prod",
                                        releaseVersion: currentRelease
                                ],

                                [
                                        url: "https://staging.cognisantmd.com/healthCheck",
                                        app: "Ocean",
                                        env: "staging",
                                        releaseVersion: candidateRelease
                                ],

                                [
                                        url: "https://stagingcc.cognisantmd.com/healthCheck",
                                        app: "CloudConnect",
                                        env: "staging",
                                        releaseVersion: candidateRelease
                                ]
                        ]

                        targets.each {
                            def target = it

                            // Get both current and candidate SVN version to use as an anchor for the version check
                            // def repo = getAppRepo("${ target.releaseVersion }/${ target.app }", v = null, "release${ target.app }/")
                            // def anchorVersion = repo.SVN_REVISION
                            def anchorVersion = 25000
                            println ("SVN Version [${ target.app }.${ target.env }]: " + anchorVersion)

                            // Delete the cloned repository
                            // sh(script: "rm -rf release${ target.app }/")

                            // Get deployed release version of app in environment
                            def deployedVersion = sh(script: "curl ${ target.url } | grep 'SVN Revision:' | awk '{print \$3}'", returnStdout: true).trim()
                            println ("Deployed Version [${ target.app }.${ target.env }]: " + deployedVersion)

                            // Get latest built release package version for app
                            def s3Url = "s3://wmooretestbucket/${ target.app }/${ target.releaseVersion }/"
                            def matchRelease = sh(script: "/usr/local/bin/aws s3 ls ${ s3Url } | sort | tail -1 | awk '{print \$4}'", returnStdout: true).trim() =~ "([0-9]+)"
                            def latestVersion = matchRelease[0][0]
                            println ("Latest Release Version [${ target.app }.${ target.env }]: " + latestVersion)

                            println("Anchor: START${anchorVersion}END")
                            println("Deployed: START${deployedVersion}END")
                            println("Latest: START${latestVersion}END")

                            // Compare version files: We want to enter here for staging only when currentRelease != candidate release.
                            if (!(currentRelease.equals(candidateRelease) && target.env.equals("staging"))) {
                                if (!anchorVersion.equals(deployedVersion)) {
                                    println(anchorVersion != deployedVersion)
                                    println("SVN version, deployed version mismatch found")
                                    // sendSlackMessage(
                                    //         app: target.app,
                                    //         env: target.env,
                                    //         msg: "Version mismatch (SVN version: ${ anchorVersion }, deployedVersion: ${ deployedVersion })",
                                    //         color: 'warning',
                                    //         slack_channel: params.slack_channel
                                    // )
                                }

                                if (!anchorVersion.equals(latestVersion)) {
                                    println(anchorVersion != latestVersion)
                                    println("SVN version, latest version mismatch found")
                                    // sendSlackMessage(
                                    //         app: target.app,
                                    //         env: target.env,
                                    //         msg: "Version mismatch (SVN version: ${ anchorVersion }, latestVersion: ${ latestVersion })",
                                    //         color: 'warning',
                                    //         slack_channel: params.slack_channel
                                    // )
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            script {
                if (currentBuild.currentResult == 'SUCCESS') {
                    echo 'All envs are running latest release versions'
                } else {
                    sendSlackMessage(
                            app: 'Compare Current Releases',
                            env: 'JenkinsJob',
                            msg: 'Job failed. What happened?',
                            color: 'danger',
                            slack_channel: params.slack_channel
                    )
                }
            }
        }
    }
}